from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramForbiddenError
from config import BOT_TOKEN
import hh_api
import database
import keyboards  # ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º!

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class SearchForm(StatesGroup):
    waiting_for_query = State()
    waiting_for_city = State()
    waiting_for_salary = State()
    waiting_for_experience = State()

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(F.text == "/start")
async def start(message: types.Message):
    try:
        database.init_db()
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É.\n"
            "–ù–∞–∂–º–∏ 'üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=keyboards.main_kb
        )
    except TelegramForbiddenError:
        print(f"‚ùå –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π"
@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π")
async def ask_query(message: types.Message, state: FSMContext):
    try:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
        await state.set_state(SearchForm.waiting_for_query)
    except TelegramForbiddenError:
        print(f"‚ùå –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ ‚Üí –≥–æ—Ä–æ–¥
@dp.message(SearchForm.waiting_for_query)
async def ask_city(message: types.Message, state: FSMContext):
    try:
        await state.update_data(query=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞):")
        await state.set_state(SearchForm.waiting_for_city)
    except TelegramForbiddenError:
        print(f"‚ùå –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

# ‚úÖ –ì–æ—Ä–æ–¥ ‚Üí –∑–∞—Ä–ø–ª–∞—Ç–∞
@dp.message(SearchForm.waiting_for_city)
async def ask_salary(message: types.Message, state: FSMContext):
    try:
        await state.update_data(city=message.text)
        await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100000), –∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ:")
        await state.set_state(SearchForm.waiting_for_salary)
    except TelegramForbiddenError:
        print(f"‚ùå –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

# ‚úÖ –ó–∞—Ä–ø–ª–∞—Ç–∞ ‚Üí –≤—ã–±–æ—Ä –æ–ø—ã—Ç–∞
@dp.message(SearchForm.waiting_for_salary)
async def ask_experience(message: types.Message, state: FSMContext):
    try:
        salary = message.text if message.text != "-" else None
        await state.update_data(salary=salary)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ë–µ–∑ –æ–ø—ã—Ç–∞", callback_data="exp_noExperience")],
            [InlineKeyboardButton(text="1‚Äì3 –≥–æ–¥–∞", callback_data="exp_between1And3")],
            [InlineKeyboardButton(text="3‚Äì6 –ª–µ—Ç", callback_data="exp_between3And6")],
            [InlineKeyboardButton(text="–ë–æ–ª–µ–µ 6 –ª–µ—Ç", callback_data="exp_moreThan6")],
            [InlineKeyboardButton(text="–ù–µ –≤–∞–∂–Ω–æ", callback_data="exp_any")]
        ])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:", reply_markup=kb)
        await state.set_state(SearchForm.waiting_for_experience)
    except TelegramForbiddenError:
        print(f"‚ùå –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø—ã—Ç–∞
@dp.callback_query(F.data.startswith("exp_"))
async def handle_experience(callback: types.CallbackQuery, state: FSMContext):
    try:
        exp_map = {
            "exp_noExperience": "noExperience",
            "exp_between1And3": "between1And3",
            "exp_between3And6": "between3And6",
            "exp_moreThan6": "moreThan6",
            "exp_any": None
        }
        data_key = callback.data.split("_")[1]
        experience = exp_map.get(data_key)

        await state.update_data(experience=experience)
        await callback.answer("‚úÖ –í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

        user_data = await state.get_data()
        query = user_data['query']
        city = user_data['city']
        salary = user_data['salary']
        experience = user_data['experience']

        vacancies = hh_api.search_vacancies(query, city, salary, experience)

        if not vacancies:
            await callback.message.answer("üîç –í–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await callback.message.answer(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π:")
            for vac in vacancies:
                text = f"üíº <b>{vac['title']}</b>\n"
                text += f"üè¢ {vac['company']}\n"
                text += f"üí∞ {vac['salary']}"
                await callback.message.answer(
                    text,
                    reply_markup=keyboards.get_vacancy_kb(vac['id']),
                    parse_mode="HTML"
                )

        await state.clear()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–ø—ã—Ç–∞: {e}")

# –ó–∞–ø—É—Å–∫
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())